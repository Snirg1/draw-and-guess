{"ast":null,"code":"// ../../react-shim.js\nimport React from \"react\"; // src/circular-progress.tsx\n\nimport { chakra as chakra3 } from \"@chakra-ui/system\"; // src/progress.utils.tsx\n\nimport { keyframes } from \"@chakra-ui/system\";\n\nfunction valueToPercent(value, min, max) {\n  return (value - min) * 100 / (max - min);\n}\n\nvar spin = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\"\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\"\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\"\n  }\n});\nvar rotate = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nvar progress = keyframes({\n  \"0%\": {\n    left: \"-40%\"\n  },\n  \"100%\": {\n    left: \"100%\"\n  }\n});\nvar stripe = keyframes({\n  from: {\n    backgroundPosition: \"1rem 0\"\n  },\n  to: {\n    backgroundPosition: \"0 0\"\n  }\n});\n\nfunction getProgressProps(options) {\n  const {\n    value = 0,\n    min,\n    max,\n    valueText,\n    getValueText,\n    isIndeterminate\n  } = options;\n  const percent = valueToPercent(value, min, max);\n\n  const getAriaValueText = () => {\n    if (value == null) return void 0;\n    return typeof getValueText === \"function\" ? getValueText(value, percent) : valueText;\n  };\n\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : void 0,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? void 0 : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role: \"progressbar\"\n    },\n    percent,\n    value\n  };\n} // src/shape.tsx\n\n\nimport { chakra } from \"@chakra-ui/system\";\n\nvar Shape = props => {\n  const {\n    size,\n    isIndeterminate,\n    ...rest\n  } = props;\n  return /* @__PURE__ */React.createElement(chakra.svg, {\n    viewBox: \"0 0 100 100\",\n    __css: {\n      width: size,\n      height: size,\n      animation: isIndeterminate ? `${rotate} 2s linear infinite` : void 0\n    },\n    ...rest\n  });\n};\n\nShape.displayName = \"Shape\"; // src/circle.tsx\n\nimport { chakra as chakra2 } from \"@chakra-ui/system\";\n\nvar Circle = props => /* @__PURE__ */React.createElement(chakra2.circle, {\n  cx: 50,\n  cy: 50,\n  r: 42,\n  fill: \"transparent\",\n  ...props\n});\n\nCircle.displayName = \"Circle\"; // src/circular-progress.tsx\n\nvar CircularProgress = props => {\n  const {\n    size = \"48px\",\n    max = 100,\n    min = 0,\n    valueText,\n    getValueText,\n    value,\n    capIsRound,\n    children,\n    thickness = \"10px\",\n    color = \"#0078d4\",\n    trackColor = \"#edebe9\",\n    isIndeterminate,\n    ...rest\n  } = props;\n  const progress2 = getProgressProps({\n    min,\n    max,\n    value,\n    valueText,\n    getValueText,\n    isIndeterminate\n  });\n  const determinant = isIndeterminate ? void 0 : (progress2.percent ?? 0) * 2.64;\n  const strokeDasharray = determinant == null ? void 0 : `${determinant} ${264 - determinant}`;\n  const indicatorProps = isIndeterminate ? {\n    css: {\n      animation: `${spin} 1.5s linear infinite`\n    }\n  } : {\n    strokeDashoffset: 66,\n    strokeDasharray,\n    transitionProperty: \"stroke-dasharray, stroke\",\n    transitionDuration: \"0.6s\",\n    transitionTimingFunction: \"ease\"\n  };\n  const rootStyles = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size\n  };\n  return /* @__PURE__ */React.createElement(chakra3.div, {\n    className: \"chakra-progress\",\n    ...progress2.bind,\n    ...rest,\n    __css: rootStyles\n  }, /* @__PURE__ */React.createElement(Shape, {\n    size,\n    isIndeterminate\n  }, /* @__PURE__ */React.createElement(Circle, {\n    stroke: trackColor,\n    strokeWidth: thickness,\n    className: \"chakra-progress__track\"\n  }), /* @__PURE__ */React.createElement(Circle, {\n    stroke: color,\n    strokeWidth: thickness,\n    className: \"chakra-progress__indicator\",\n    strokeLinecap: capIsRound ? \"round\" : void 0,\n    opacity: progress2.value === 0 && !isIndeterminate ? 0 : void 0,\n    ...indicatorProps\n  })), children);\n};\n\nCircularProgress.displayName = \"CircularProgress\"; // src/progress.tsx\n\nimport { chakra as chakra4, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [ProgressStylesProvider, useProgressStyles] = createContext({\n  name: `ProgressStylesContext`,\n  errorMessage: `useProgressStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Progress />\" `\n});\n\nvar ProgressFilledTrack = props => {\n  const {\n    min,\n    max,\n    value,\n    isIndeterminate,\n    ...rest\n  } = props;\n  const progress2 = getProgressProps({\n    value,\n    min,\n    max,\n    isIndeterminate\n  });\n  const styles = useProgressStyles();\n  const trackStyles = {\n    height: \"100%\",\n    ...styles.filledTrack\n  };\n  return /* @__PURE__ */React.createElement(chakra4.div, {\n    style: {\n      width: `${progress2.percent}%`,\n      ...rest.style\n    },\n    ...progress2.bind,\n    ...rest,\n    __css: trackStyles\n  });\n};\n\nvar Progress = props => {\n  var _a;\n\n  const {\n    value,\n    min = 0,\n    max = 100,\n    hasStripe,\n    isAnimated,\n    children,\n    borderRadius: propBorderRadius,\n    isIndeterminate,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    ...rest\n  } = omitThemingProps(props);\n  const styles = useMultiStyleConfig(\"Progress\", props);\n  const borderRadius = propBorderRadius ?? ((_a = styles.track) == null ? void 0 : _a.borderRadius);\n  const stripeAnimation = {\n    animation: `${stripe} 1s linear infinite`\n  };\n  const shouldAddStripe = !isIndeterminate && hasStripe;\n  const shouldAnimateStripe = shouldAddStripe && isAnimated;\n  const css = { ...(shouldAnimateStripe && stripeAnimation),\n    ...(isIndeterminate && {\n      position: \"absolute\",\n      willChange: \"left\",\n      minWidth: \"50%\",\n      animation: `${progress} 1s ease infinite normal none running`\n    })\n  };\n  const trackStyles = {\n    overflow: \"hidden\",\n    position: \"relative\",\n    ...styles.track\n  };\n  return /* @__PURE__ */React.createElement(chakra4.div, {\n    borderRadius,\n    __css: trackStyles,\n    ...rest\n  }, /* @__PURE__ */React.createElement(ProgressStylesProvider, {\n    value: styles\n  }, /* @__PURE__ */React.createElement(ProgressFilledTrack, {\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    min,\n    max,\n    value,\n    isIndeterminate,\n    css,\n    borderRadius\n  }), children));\n};\n\nProgress.displayName = \"Progress\"; // src/progress-label.tsx\n\nimport { chakra as chakra5 } from \"@chakra-ui/system\";\n\nvar ProgressLabel = props => {\n  const styles = useProgressStyles();\n  const labelStyles = {\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\",\n    ...styles.label\n  };\n  return /* @__PURE__ */React.createElement(chakra5.div, { ...props,\n    __css: labelStyles\n  });\n};\n\nProgressLabel.displayName = \"ProgressLabel\"; // src/circular-progress-label.tsx\n\nimport { chakra as chakra6 } from \"@chakra-ui/system\";\nvar CircularProgressLabel = chakra6(\"div\", {\n  baseStyle: {\n    fontSize: \"0.24em\",\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  }\n});\nCircularProgressLabel.displayName = \"CircularProgressLabel\";\nexport { CircularProgress, CircularProgressLabel, Progress, ProgressLabel, useProgressStyles };","map":{"version":3,"sources":["/Users/Snirgu1/Desktop/draw-and-guess/client/node_modules/@chakra-ui/progress/dist/index.esm.js"],"names":["React","chakra","chakra3","keyframes","valueToPercent","value","min","max","spin","strokeDasharray","strokeDashoffset","rotate","transform","progress","left","stripe","from","backgroundPosition","to","getProgressProps","options","valueText","getValueText","isIndeterminate","percent","getAriaValueText","bind","role","Shape","props","size","rest","createElement","svg","viewBox","__css","width","height","animation","displayName","chakra2","Circle","circle","cx","cy","r","fill","CircularProgress","capIsRound","children","thickness","color","trackColor","progress2","determinant","indicatorProps","css","transitionProperty","transitionDuration","transitionTimingFunction","rootStyles","display","position","verticalAlign","fontSize","div","className","stroke","strokeWidth","strokeLinecap","opacity","chakra4","omitThemingProps","useMultiStyleConfig","createContext","ProgressStylesProvider","useProgressStyles","name","errorMessage","ProgressFilledTrack","styles","trackStyles","filledTrack","style","Progress","_a","hasStripe","isAnimated","borderRadius","propBorderRadius","ariaLabel","ariaLabelledBy","track","stripeAnimation","shouldAddStripe","shouldAnimateStripe","willChange","minWidth","overflow","chakra5","ProgressLabel","labelStyles","top","textAlign","label","chakra6","CircularProgressLabel","baseStyle"],"mappings":"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","sourcesContent":["// ../../react-shim.js\nimport React from \"react\";\n\n// src/circular-progress.tsx\nimport { chakra as chakra3 } from \"@chakra-ui/system\";\n\n// src/progress.utils.tsx\nimport { keyframes } from \"@chakra-ui/system\";\nfunction valueToPercent(value, min, max) {\n  return (value - min) * 100 / (max - min);\n}\nvar spin = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\"\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\"\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\"\n  }\n});\nvar rotate = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nvar progress = keyframes({\n  \"0%\": { left: \"-40%\" },\n  \"100%\": { left: \"100%\" }\n});\nvar stripe = keyframes({\n  from: { backgroundPosition: \"1rem 0\" },\n  to: { backgroundPosition: \"0 0\" }\n});\nfunction getProgressProps(options) {\n  const {\n    value = 0,\n    min,\n    max,\n    valueText,\n    getValueText,\n    isIndeterminate\n  } = options;\n  const percent = valueToPercent(value, min, max);\n  const getAriaValueText = () => {\n    if (value == null)\n      return void 0;\n    return typeof getValueText === \"function\" ? getValueText(value, percent) : valueText;\n  };\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : void 0,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? void 0 : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role: \"progressbar\"\n    },\n    percent,\n    value\n  };\n}\n\n// src/shape.tsx\nimport { chakra } from \"@chakra-ui/system\";\nvar Shape = (props) => {\n  const { size, isIndeterminate, ...rest } = props;\n  return /* @__PURE__ */ React.createElement(chakra.svg, {\n    viewBox: \"0 0 100 100\",\n    __css: {\n      width: size,\n      height: size,\n      animation: isIndeterminate ? `${rotate} 2s linear infinite` : void 0\n    },\n    ...rest\n  });\n};\nShape.displayName = \"Shape\";\n\n// src/circle.tsx\nimport { chakra as chakra2 } from \"@chakra-ui/system\";\nvar Circle = (props) => /* @__PURE__ */ React.createElement(chakra2.circle, {\n  cx: 50,\n  cy: 50,\n  r: 42,\n  fill: \"transparent\",\n  ...props\n});\nCircle.displayName = \"Circle\";\n\n// src/circular-progress.tsx\nvar CircularProgress = (props) => {\n  const {\n    size = \"48px\",\n    max = 100,\n    min = 0,\n    valueText,\n    getValueText,\n    value,\n    capIsRound,\n    children,\n    thickness = \"10px\",\n    color = \"#0078d4\",\n    trackColor = \"#edebe9\",\n    isIndeterminate,\n    ...rest\n  } = props;\n  const progress2 = getProgressProps({\n    min,\n    max,\n    value,\n    valueText,\n    getValueText,\n    isIndeterminate\n  });\n  const determinant = isIndeterminate ? void 0 : (progress2.percent ?? 0) * 2.64;\n  const strokeDasharray = determinant == null ? void 0 : `${determinant} ${264 - determinant}`;\n  const indicatorProps = isIndeterminate ? {\n    css: { animation: `${spin} 1.5s linear infinite` }\n  } : {\n    strokeDashoffset: 66,\n    strokeDasharray,\n    transitionProperty: \"stroke-dasharray, stroke\",\n    transitionDuration: \"0.6s\",\n    transitionTimingFunction: \"ease\"\n  };\n  const rootStyles = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size\n  };\n  return /* @__PURE__ */ React.createElement(chakra3.div, {\n    className: \"chakra-progress\",\n    ...progress2.bind,\n    ...rest,\n    __css: rootStyles\n  }, /* @__PURE__ */ React.createElement(Shape, {\n    size,\n    isIndeterminate\n  }, /* @__PURE__ */ React.createElement(Circle, {\n    stroke: trackColor,\n    strokeWidth: thickness,\n    className: \"chakra-progress__track\"\n  }), /* @__PURE__ */ React.createElement(Circle, {\n    stroke: color,\n    strokeWidth: thickness,\n    className: \"chakra-progress__indicator\",\n    strokeLinecap: capIsRound ? \"round\" : void 0,\n    opacity: progress2.value === 0 && !isIndeterminate ? 0 : void 0,\n    ...indicatorProps\n  })), children);\n};\nCircularProgress.displayName = \"CircularProgress\";\n\n// src/progress.tsx\nimport {\n  chakra as chakra4,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [ProgressStylesProvider, useProgressStyles] = createContext({\n  name: `ProgressStylesContext`,\n  errorMessage: `useProgressStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Progress />\" `\n});\nvar ProgressFilledTrack = (props) => {\n  const { min, max, value, isIndeterminate, ...rest } = props;\n  const progress2 = getProgressProps({ value, min, max, isIndeterminate });\n  const styles = useProgressStyles();\n  const trackStyles = {\n    height: \"100%\",\n    ...styles.filledTrack\n  };\n  return /* @__PURE__ */ React.createElement(chakra4.div, {\n    style: {\n      width: `${progress2.percent}%`,\n      ...rest.style\n    },\n    ...progress2.bind,\n    ...rest,\n    __css: trackStyles\n  });\n};\nvar Progress = (props) => {\n  var _a;\n  const {\n    value,\n    min = 0,\n    max = 100,\n    hasStripe,\n    isAnimated,\n    children,\n    borderRadius: propBorderRadius,\n    isIndeterminate,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    ...rest\n  } = omitThemingProps(props);\n  const styles = useMultiStyleConfig(\"Progress\", props);\n  const borderRadius = propBorderRadius ?? ((_a = styles.track) == null ? void 0 : _a.borderRadius);\n  const stripeAnimation = { animation: `${stripe} 1s linear infinite` };\n  const shouldAddStripe = !isIndeterminate && hasStripe;\n  const shouldAnimateStripe = shouldAddStripe && isAnimated;\n  const css = {\n    ...shouldAnimateStripe && stripeAnimation,\n    ...isIndeterminate && {\n      position: \"absolute\",\n      willChange: \"left\",\n      minWidth: \"50%\",\n      animation: `${progress} 1s ease infinite normal none running`\n    }\n  };\n  const trackStyles = {\n    overflow: \"hidden\",\n    position: \"relative\",\n    ...styles.track\n  };\n  return /* @__PURE__ */ React.createElement(chakra4.div, {\n    borderRadius,\n    __css: trackStyles,\n    ...rest\n  }, /* @__PURE__ */ React.createElement(ProgressStylesProvider, {\n    value: styles\n  }, /* @__PURE__ */ React.createElement(ProgressFilledTrack, {\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    min,\n    max,\n    value,\n    isIndeterminate,\n    css,\n    borderRadius\n  }), children));\n};\nProgress.displayName = \"Progress\";\n\n// src/progress-label.tsx\nimport { chakra as chakra5 } from \"@chakra-ui/system\";\nvar ProgressLabel = (props) => {\n  const styles = useProgressStyles();\n  const labelStyles = {\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\",\n    ...styles.label\n  };\n  return /* @__PURE__ */ React.createElement(chakra5.div, {\n    ...props,\n    __css: labelStyles\n  });\n};\nProgressLabel.displayName = \"ProgressLabel\";\n\n// src/circular-progress-label.tsx\nimport { chakra as chakra6 } from \"@chakra-ui/system\";\nvar CircularProgressLabel = chakra6(\"div\", {\n  baseStyle: {\n    fontSize: \"0.24em\",\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  }\n});\nCircularProgressLabel.displayName = \"CircularProgressLabel\";\nexport {\n  CircularProgress,\n  CircularProgressLabel,\n  Progress,\n  ProgressLabel,\n  useProgressStyles\n};\n"]},"metadata":{},"sourceType":"module"}