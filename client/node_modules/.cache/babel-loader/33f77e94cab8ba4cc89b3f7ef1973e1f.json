{"ast":null,"code":"// src/index.ts\nimport { createContext as createReactContext, useContext as useReactContext } from \"react\";\n\nfunction getErrorMessage(hook, provider) {\n  return `${hook} returned \\`undefined\\`. Seems you forgot to wrap component within ${provider}`;\n}\n\nfunction createContext() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    name,\n    strict = true,\n    hookName = \"useContext\",\n    providerName = \"Provider\",\n    errorMessage\n  } = options;\n  const Context = createReactContext(void 0);\n  Context.displayName = name;\n\n  function useContext() {\n    var _a;\n\n    const context = useReactContext(Context);\n\n    if (!context && strict) {\n      const error = new Error(errorMessage ?? getErrorMessage(hookName, providerName));\n      error.name = \"ContextError\";\n      (_a = Error.captureStackTrace) == null ? void 0 : _a.call(Error, error, useContext);\n      throw error;\n    }\n\n    return context;\n  }\n\n  return [Context.Provider, useContext, Context];\n}\n\nexport { createContext };","map":{"version":3,"sources":["/Users/Snirgu1/Desktop/draw-and-guess/client/node_modules/@chakra-ui/react-context/dist/index.esm.js"],"names":["createContext","createReactContext","useContext","useReactContext","getErrorMessage","hook","provider","options","name","strict","hookName","providerName","errorMessage","Context","displayName","_a","context","error","Error","captureStackTrace","call","Provider"],"mappings":"AAAA;AACA,SACEA,aAAa,IAAIC,kBADnB,EAEEC,UAAU,IAAIC,eAFhB,QAGO,OAHP;;AAIA,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,QAA/B,EAAyC;AACvC,SAAQ,GAAED,IAAK,sEAAqEC,QAAS,EAA7F;AACD;;AACD,SAASN,aAAT,GAAqC;AAAA,MAAdO,OAAc,uEAAJ,EAAI;AACnC,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,MAAM,GAAG,IAFL;AAGJC,IAAAA,QAAQ,GAAG,YAHP;AAIJC,IAAAA,YAAY,GAAG,UAJX;AAKJC,IAAAA;AALI,MAMFL,OANJ;AAOA,QAAMM,OAAO,GAAGZ,kBAAkB,CAAC,KAAK,CAAN,CAAlC;AACAY,EAAAA,OAAO,CAACC,WAAR,GAAsBN,IAAtB;;AACA,WAASN,UAAT,GAAsB;AACpB,QAAIa,EAAJ;;AACA,UAAMC,OAAO,GAAGb,eAAe,CAACU,OAAD,CAA/B;;AACA,QAAI,CAACG,OAAD,IAAYP,MAAhB,EAAwB;AACtB,YAAMQ,KAAK,GAAG,IAAIC,KAAJ,CAAUN,YAAY,IAAIR,eAAe,CAACM,QAAD,EAAWC,YAAX,CAAzC,CAAd;AACAM,MAAAA,KAAK,CAACT,IAAN,GAAa,cAAb;AACA,OAACO,EAAE,GAAGG,KAAK,CAACC,iBAAZ,KAAkC,IAAlC,GAAyC,KAAK,CAA9C,GAAkDJ,EAAE,CAACK,IAAH,CAAQF,KAAR,EAAeD,KAAf,EAAsBf,UAAtB,CAAlD;AACA,YAAMe,KAAN;AACD;;AACD,WAAOD,OAAP;AACD;;AACD,SAAO,CAACH,OAAO,CAACQ,QAAT,EAAmBnB,UAAnB,EAA+BW,OAA/B,CAAP;AACD;;AACD,SACEb,aADF","sourcesContent":["// src/index.ts\nimport {\n  createContext as createReactContext,\n  useContext as useReactContext\n} from \"react\";\nfunction getErrorMessage(hook, provider) {\n  return `${hook} returned \\`undefined\\`. Seems you forgot to wrap component within ${provider}`;\n}\nfunction createContext(options = {}) {\n  const {\n    name,\n    strict = true,\n    hookName = \"useContext\",\n    providerName = \"Provider\",\n    errorMessage\n  } = options;\n  const Context = createReactContext(void 0);\n  Context.displayName = name;\n  function useContext() {\n    var _a;\n    const context = useReactContext(Context);\n    if (!context && strict) {\n      const error = new Error(errorMessage ?? getErrorMessage(hookName, providerName));\n      error.name = \"ContextError\";\n      (_a = Error.captureStackTrace) == null ? void 0 : _a.call(Error, error, useContext);\n      throw error;\n    }\n    return context;\n  }\n  return [Context.Provider, useContext, Context];\n}\nexport {\n  createContext\n};\n"]},"metadata":{},"sourceType":"module"}