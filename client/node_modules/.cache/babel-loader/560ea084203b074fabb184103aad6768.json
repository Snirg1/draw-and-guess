{"ast":null,"code":"// ../../react-shim.js\nimport React from \"react\"; // src/spinner.tsx\n\nimport { chakra, forwardRef, keyframes, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\"; // ../../utilities/shared-utils/dist/index.esm.js\n\nvar cx = function () {\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n\n  return classNames.filter(Boolean).join(\" \");\n}; // src/spinner.tsx\n\n\nvar spin = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nvar Spinner = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Spinner\", props);\n  const {\n    label = \"Loading...\",\n    thickness = \"2px\",\n    speed = \"0.45s\",\n    emptyColor = \"transparent\",\n    className,\n    ...rest\n  } = omitThemingProps(props);\n\n  const _className = cx(\"chakra-spinner\", className);\n\n  const spinnerStyles = {\n    display: \"inline-block\",\n    borderColor: \"currentColor\",\n    borderStyle: \"solid\",\n    borderRadius: \"99999px\",\n    borderWidth: thickness,\n    borderBottomColor: emptyColor,\n    borderLeftColor: emptyColor,\n    animation: `${spin} ${speed} linear infinite`,\n    ...styles\n  };\n  return /* @__PURE__ */React.createElement(chakra.div, {\n    ref,\n    __css: spinnerStyles,\n    className: _className,\n    ...rest\n  }, label && /* @__PURE__ */React.createElement(chakra.span, {\n    srOnly: true\n  }, label));\n});\nSpinner.displayName = \"Spinner\";\nexport { Spinner };","map":{"version":3,"sources":["/Users/Snirgu1/Desktop/draw-and-guess/client/node_modules/@chakra-ui/spinner/dist/index.esm.js"],"names":["React","chakra","forwardRef","keyframes","omitThemingProps","useStyleConfig","cx","classNames","filter","Boolean","join","spin","transform","Spinner","props","ref","styles","label","thickness","speed","emptyColor","className","rest","_className","spinnerStyles","display","borderColor","borderStyle","borderRadius","borderWidth","borderBottomColor","borderLeftColor","animation","createElement","div","__css","span","srOnly","displayName"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SACEC,MADF,EAEEC,UAFF,EAGEC,SAHF,EAIEC,gBAJF,EAKEC,cALF,QAMO,mBANP,C,CAQA;;AACA,IAAIC,EAAE,GAAG;AAAA,oCAAIC,UAAJ;AAAIA,IAAAA,UAAJ;AAAA;;AAAA,SAAmBA,UAAU,CAACC,MAAX,CAAkBC,OAAlB,EAA2BC,IAA3B,CAAgC,GAAhC,CAAnB;AAAA,CAAT,C,CAEA;;;AACA,IAAIC,IAAI,GAAGR,SAAS,CAAC;AACnB,QAAM;AACJS,IAAAA,SAAS,EAAE;AADP,GADa;AAInB,UAAQ;AACNA,IAAAA,SAAS,EAAE;AADL;AAJW,CAAD,CAApB;AAQA,IAAIC,OAAO,GAAGX,UAAU,CAAC,CAACY,KAAD,EAAQC,GAAR,KAAgB;AACvC,QAAMC,MAAM,GAAGX,cAAc,CAAC,SAAD,EAAYS,KAAZ,CAA7B;AACA,QAAM;AACJG,IAAAA,KAAK,GAAG,YADJ;AAEJC,IAAAA,SAAS,GAAG,KAFR;AAGJC,IAAAA,KAAK,GAAG,OAHJ;AAIJC,IAAAA,UAAU,GAAG,aAJT;AAKJC,IAAAA,SALI;AAMJ,OAAGC;AANC,MAOFlB,gBAAgB,CAACU,KAAD,CAPpB;;AAQA,QAAMS,UAAU,GAAGjB,EAAE,CAAC,gBAAD,EAAmBe,SAAnB,CAArB;;AACA,QAAMG,aAAa,GAAG;AACpBC,IAAAA,OAAO,EAAE,cADW;AAEpBC,IAAAA,WAAW,EAAE,cAFO;AAGpBC,IAAAA,WAAW,EAAE,OAHO;AAIpBC,IAAAA,YAAY,EAAE,SAJM;AAKpBC,IAAAA,WAAW,EAAEX,SALO;AAMpBY,IAAAA,iBAAiB,EAAEV,UANC;AAOpBW,IAAAA,eAAe,EAAEX,UAPG;AAQpBY,IAAAA,SAAS,EAAG,GAAErB,IAAK,IAAGQ,KAAM,kBARR;AASpB,OAAGH;AATiB,GAAtB;AAWA,SAAO,eAAgBhB,KAAK,CAACiC,aAAN,CAAoBhC,MAAM,CAACiC,GAA3B,EAAgC;AACrDnB,IAAAA,GADqD;AAErDoB,IAAAA,KAAK,EAAEX,aAF8C;AAGrDH,IAAAA,SAAS,EAAEE,UAH0C;AAIrD,OAAGD;AAJkD,GAAhC,EAKpBL,KAAK,IAAI,eAAgBjB,KAAK,CAACiC,aAAN,CAAoBhC,MAAM,CAACmC,IAA3B,EAAiC;AAC3DC,IAAAA,MAAM,EAAE;AADmD,GAAjC,EAEzBpB,KAFyB,CALL,CAAvB;AAQD,CA9BuB,CAAxB;AA+BAJ,OAAO,CAACyB,WAAR,GAAsB,SAAtB;AACA,SACEzB,OADF","sourcesContent":["// ../../react-shim.js\nimport React from \"react\";\n\n// src/spinner.tsx\nimport {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/dist/index.esm.js\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \");\n\n// src/spinner.tsx\nvar spin = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nvar Spinner = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Spinner\", props);\n  const {\n    label = \"Loading...\",\n    thickness = \"2px\",\n    speed = \"0.45s\",\n    emptyColor = \"transparent\",\n    className,\n    ...rest\n  } = omitThemingProps(props);\n  const _className = cx(\"chakra-spinner\", className);\n  const spinnerStyles = {\n    display: \"inline-block\",\n    borderColor: \"currentColor\",\n    borderStyle: \"solid\",\n    borderRadius: \"99999px\",\n    borderWidth: thickness,\n    borderBottomColor: emptyColor,\n    borderLeftColor: emptyColor,\n    animation: `${spin} ${speed} linear infinite`,\n    ...styles\n  };\n  return /* @__PURE__ */ React.createElement(chakra.div, {\n    ref,\n    __css: spinnerStyles,\n    className: _className,\n    ...rest\n  }, label && /* @__PURE__ */ React.createElement(chakra.span, {\n    srOnly: true\n  }, label));\n});\nSpinner.displayName = \"Spinner\";\nexport {\n  Spinner\n};\n"]},"metadata":{},"sourceType":"module"}