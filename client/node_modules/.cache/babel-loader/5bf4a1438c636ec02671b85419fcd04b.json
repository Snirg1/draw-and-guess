{"ast":null,"code":"// src/use-counter.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { clampValue, countDecimalPlaces, toPrecision } from \"@chakra-ui/number-utils\";\nimport { useCallback, useState } from \"react\";\n\nfunction useCounter() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    keepWithinRange = true\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [valueState, setValue] = useState(() => {\n    if (defaultValue == null) return \"\";\n    return cast(defaultValue, stepProp, precisionProp) ?? \"\";\n  });\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  const precision = precisionProp ?? decimalPlaces;\n  const update = useCallback(next => {\n    if (next === value) return;\n\n    if (!isControlled) {\n      setValue(next.toString());\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));\n  }, [onChangeProp, isControlled, value]);\n  const clamp = useCallback(value2 => {\n    let nextValue = value2;\n\n    if (keepWithinRange) {\n      nextValue = clampValue(nextValue, min, max);\n    }\n\n    return toPrecision(nextValue, precision);\n  }, [precision, keepWithinRange, max, min]);\n  const increment = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n    let next;\n\n    if (value === \"\") {\n      next = parse(step);\n    } else {\n      next = parse(value) + step;\n    }\n\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const decrement = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n    let next;\n\n    if (value === \"\") {\n      next = parse(-step);\n    } else {\n      next = parse(value) - step;\n    }\n\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const reset = useCallback(() => {\n    let next;\n\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp) ?? min;\n    }\n\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update, min]);\n  const castValue = useCallback(value2 => {\n    const nextValue = cast(value2, stepProp, precision) ?? min;\n    update(nextValue);\n  }, [precision, stepProp, update, min]);\n  const valueAsNumber = parse(value);\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  const isAtMax = valueAsNumber === max;\n  const isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue\n  };\n}\n\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\n\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\n\nfunction cast(value, step, precision) {\n  const parsedValue = parse(value);\n  if (Number.isNaN(parsedValue)) return void 0;\n  const decimalPlaces = getDecimalPlaces(parsedValue, step);\n  return toPrecision(parsedValue, precision ?? decimalPlaces);\n}\n\nexport { useCounter };","map":{"version":3,"sources":["/Users/Snirgu1/Desktop/draw-and-guess/client/node_modules/@chakra-ui/counter/dist/index.esm.js"],"names":["useCallbackRef","clampValue","countDecimalPlaces","toPrecision","useCallback","useState","useCounter","props","onChange","precision","precisionProp","defaultValue","value","valueProp","step","stepProp","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","keepWithinRange","onChangeProp","valueState","setValue","cast","isControlled","decimalPlaces","getDecimalPlaces","parse","update","next","toString","clamp","value2","nextValue","increment","decrement","reset","castValue","valueAsNumber","isOutOfRange","isAtMax","isAtMin","parseFloat","replace","Math","parsedValue","isNaN"],"mappings":"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","sourcesContent":["// src/use-counter.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport {\n  clampValue,\n  countDecimalPlaces,\n  toPrecision\n} from \"@chakra-ui/number-utils\";\nimport { useCallback, useState } from \"react\";\nfunction useCounter(props = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    keepWithinRange = true\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [valueState, setValue] = useState(() => {\n    if (defaultValue == null)\n      return \"\";\n    return cast(defaultValue, stepProp, precisionProp) ?? \"\";\n  });\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  const precision = precisionProp ?? decimalPlaces;\n  const update = useCallback((next) => {\n    if (next === value)\n      return;\n    if (!isControlled) {\n      setValue(next.toString());\n    }\n    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));\n  }, [onChangeProp, isControlled, value]);\n  const clamp = useCallback((value2) => {\n    let nextValue = value2;\n    if (keepWithinRange) {\n      nextValue = clampValue(nextValue, min, max);\n    }\n    return toPrecision(nextValue, precision);\n  }, [precision, keepWithinRange, max, min]);\n  const increment = useCallback((step = stepProp) => {\n    let next;\n    if (value === \"\") {\n      next = parse(step);\n    } else {\n      next = parse(value) + step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const decrement = useCallback((step = stepProp) => {\n    let next;\n    if (value === \"\") {\n      next = parse(-step);\n    } else {\n      next = parse(value) - step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const reset = useCallback(() => {\n    let next;\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp) ?? min;\n    }\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update, min]);\n  const castValue = useCallback((value2) => {\n    const nextValue = cast(value2, stepProp, precision) ?? min;\n    update(nextValue);\n  }, [precision, stepProp, update, min]);\n  const valueAsNumber = parse(value);\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  const isAtMax = valueAsNumber === max;\n  const isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue\n  };\n}\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\nfunction cast(value, step, precision) {\n  const parsedValue = parse(value);\n  if (Number.isNaN(parsedValue))\n    return void 0;\n  const decimalPlaces = getDecimalPlaces(parsedValue, step);\n  return toPrecision(parsedValue, precision ?? decimalPlaces);\n}\nexport {\n  useCounter\n};\n"]},"metadata":{},"sourceType":"module"}