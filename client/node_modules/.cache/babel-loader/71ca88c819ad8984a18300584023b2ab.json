{"ast":null,"code":"// ../../react-shim.js\nimport React from \"react\"; // src/focus-lock.tsx\n\nimport ReactFocusLock from \"react-focus-lock\";\nimport { getAllFocusable } from \"@chakra-ui/dom-utils\";\nimport { useCallback } from \"react\";\n\nvar FocusLock = props => {\n  const {\n    initialFocusRef,\n    finalFocusRef,\n    contentRef,\n    restoreFocus,\n    children,\n    isDisabled,\n    autoFocus,\n    persistentFocus,\n    lockFocusAcrossFrames\n  } = props;\n  const onActivation = useCallback(() => {\n    if (initialFocusRef == null ? void 0 : initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    } else if (contentRef == null ? void 0 : contentRef.current) {\n      const focusables = getAllFocusable(contentRef.current);\n\n      if (focusables.length === 0) {\n        requestAnimationFrame(() => {\n          var _a;\n\n          (_a = contentRef.current) == null ? void 0 : _a.focus();\n        });\n      }\n    }\n  }, [initialFocusRef, contentRef]);\n  const onDeactivation = useCallback(() => {\n    var _a;\n\n    (_a = finalFocusRef == null ? void 0 : finalFocusRef.current) == null ? void 0 : _a.focus();\n  }, [finalFocusRef]);\n  const returnFocus = restoreFocus && !finalFocusRef;\n  return /* @__PURE__ */React.createElement(ReactFocusLock, {\n    crossFrame: lockFocusAcrossFrames,\n    persistentFocus,\n    autoFocus,\n    disabled: isDisabled,\n    onActivation,\n    onDeactivation,\n    returnFocus\n  }, children);\n};\n\nFocusLock.displayName = \"FocusLock\";\nexport { FocusLock };","map":{"version":3,"sources":["/Users/Snirgu1/Desktop/draw-and-guess/client/node_modules/@chakra-ui/focus-lock/dist/index.esm.js"],"names":["React","ReactFocusLock","getAllFocusable","useCallback","FocusLock","props","initialFocusRef","finalFocusRef","contentRef","restoreFocus","children","isDisabled","autoFocus","persistentFocus","lockFocusAcrossFrames","onActivation","current","focus","focusables","length","requestAnimationFrame","_a","onDeactivation","returnFocus","createElement","crossFrame","disabled","displayName"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,WAAT,QAA4B,OAA5B;;AACA,IAAIC,SAAS,GAAIC,KAAD,IAAW;AACzB,QAAM;AACJC,IAAAA,eADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA,SAPI;AAQJC,IAAAA,eARI;AASJC,IAAAA;AATI,MAUFT,KAVJ;AAWA,QAAMU,YAAY,GAAGZ,WAAW,CAAC,MAAM;AACrC,QAAIG,eAAe,IAAI,IAAnB,GAA0B,KAAK,CAA/B,GAAmCA,eAAe,CAACU,OAAvD,EAAgE;AAC9DV,MAAAA,eAAe,CAACU,OAAhB,CAAwBC,KAAxB;AACD,KAFD,MAEO,IAAIT,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,CAACQ,OAA7C,EAAsD;AAC3D,YAAME,UAAU,GAAGhB,eAAe,CAACM,UAAU,CAACQ,OAAZ,CAAlC;;AACA,UAAIE,UAAU,CAACC,MAAX,KAAsB,CAA1B,EAA6B;AAC3BC,QAAAA,qBAAqB,CAAC,MAAM;AAC1B,cAAIC,EAAJ;;AACA,WAACA,EAAE,GAAGb,UAAU,CAACQ,OAAjB,KAA6B,IAA7B,GAAoC,KAAK,CAAzC,GAA6CK,EAAE,CAACJ,KAAH,EAA7C;AACD,SAHoB,CAArB;AAID;AACF;AACF,GAZ+B,EAY7B,CAACX,eAAD,EAAkBE,UAAlB,CAZ6B,CAAhC;AAaA,QAAMc,cAAc,GAAGnB,WAAW,CAAC,MAAM;AACvC,QAAIkB,EAAJ;;AACA,KAACA,EAAE,GAAGd,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACS,OAArD,KAAiE,IAAjE,GAAwE,KAAK,CAA7E,GAAiFK,EAAE,CAACJ,KAAH,EAAjF;AACD,GAHiC,EAG/B,CAACV,aAAD,CAH+B,CAAlC;AAIA,QAAMgB,WAAW,GAAGd,YAAY,IAAI,CAACF,aAArC;AACA,SAAO,eAAgBP,KAAK,CAACwB,aAAN,CAAoBvB,cAApB,EAAoC;AACzDwB,IAAAA,UAAU,EAAEX,qBAD6C;AAEzDD,IAAAA,eAFyD;AAGzDD,IAAAA,SAHyD;AAIzDc,IAAAA,QAAQ,EAAEf,UAJ+C;AAKzDI,IAAAA,YALyD;AAMzDO,IAAAA,cANyD;AAOzDC,IAAAA;AAPyD,GAApC,EAQpBb,QARoB,CAAvB;AASD,CAvCD;;AAwCAN,SAAS,CAACuB,WAAV,GAAwB,WAAxB;AACA,SACEvB,SADF","sourcesContent":["// ../../react-shim.js\nimport React from \"react\";\n\n// src/focus-lock.tsx\nimport ReactFocusLock from \"react-focus-lock\";\nimport { getAllFocusable } from \"@chakra-ui/dom-utils\";\nimport { useCallback } from \"react\";\nvar FocusLock = (props) => {\n  const {\n    initialFocusRef,\n    finalFocusRef,\n    contentRef,\n    restoreFocus,\n    children,\n    isDisabled,\n    autoFocus,\n    persistentFocus,\n    lockFocusAcrossFrames\n  } = props;\n  const onActivation = useCallback(() => {\n    if (initialFocusRef == null ? void 0 : initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    } else if (contentRef == null ? void 0 : contentRef.current) {\n      const focusables = getAllFocusable(contentRef.current);\n      if (focusables.length === 0) {\n        requestAnimationFrame(() => {\n          var _a;\n          (_a = contentRef.current) == null ? void 0 : _a.focus();\n        });\n      }\n    }\n  }, [initialFocusRef, contentRef]);\n  const onDeactivation = useCallback(() => {\n    var _a;\n    (_a = finalFocusRef == null ? void 0 : finalFocusRef.current) == null ? void 0 : _a.focus();\n  }, [finalFocusRef]);\n  const returnFocus = restoreFocus && !finalFocusRef;\n  return /* @__PURE__ */ React.createElement(ReactFocusLock, {\n    crossFrame: lockFocusAcrossFrames,\n    persistentFocus,\n    autoFocus,\n    disabled: isDisabled,\n    onActivation,\n    onDeactivation,\n    returnFocus\n  }, children);\n};\nFocusLock.displayName = \"FocusLock\";\nexport {\n  FocusLock\n};\n"]},"metadata":{},"sourceType":"module"}