{"ast":null,"code":"// ../../../react-shim.js\nimport React from \"react\"; // src/skeleton.tsx\n\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\nimport { chakra, forwardRef, keyframes, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { usePrevious } from \"@chakra-ui/react-use-previous\"; // ../../utilities/shared-utils/dist/index.esm.js\n\nvar cx = function () {\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n\n  return classNames.filter(Boolean).join(\" \");\n}; // src/skeleton.tsx\n\n\nimport { useEffect, useRef } from \"react\";\nvar StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\"\n    }\n  }\n});\n\nvar useIsFirstRender = () => {\n  const isFirstRender = useRef(true);\n  useEffect(() => {\n    isFirstRender.current = false;\n  }, []);\n  return isFirstRender.current;\n};\n\nvar fade = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar startColor = \"var(--skeleton-start-color)\";\nvar endColor = \"var(--skeleton-end-color)\";\nvar bgFade = keyframes({\n  from: {\n    borderColor: startColor,\n    background: startColor\n  },\n  to: {\n    borderColor: endColor,\n    background: endColor\n  }\n});\nvar Skeleton = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Skeleton\", props);\n  const isFirstRender = useIsFirstRender();\n  const {\n    startColor: startColor2,\n    endColor: endColor2,\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    ...rest\n  } = omitThemingProps(props);\n  const wasPreviouslyLoaded = usePrevious(isLoaded);\n\n  const _className = cx(\"chakra-skeleton\", className);\n\n  if (isLoaded) {\n    const animation = isFirstRender || wasPreviouslyLoaded ? \"none\" : `${fade} ${fadeDuration}s`;\n    return /* @__PURE__ */React.createElement(chakra.div, {\n      ref,\n      className: _className,\n      __css: {\n        animation\n      },\n      ...rest\n    });\n  }\n\n  return /* @__PURE__ */React.createElement(StyledSkeleton, {\n    ref,\n    className: _className,\n    ...rest,\n    __css: { ...styles,\n      animation: `${speed}s linear infinite alternate ${bgFade}`\n    }\n  });\n});\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8\n};\nSkeleton.displayName = \"Skeleton\";\n\nfunction range(count) {\n  return Array(count).fill(1).map((_, index) => index + 1);\n}\n\nvar defaultNoOfLines = 3;\n\nvar SkeletonText = props => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor: startColor2,\n    endColor: endColor2,\n    isLoaded,\n    fadeDuration,\n    speed,\n    children,\n    ...rest\n  } = props;\n  const noOfLinesValue = useBreakpointValue(typeof noOfLines === \"number\" ? [noOfLines] : noOfLines) || defaultNoOfLines;\n  const numbers = range(noOfLinesValue);\n\n  const getWidth = index => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\";\n    }\n\n    return \"100%\";\n  };\n\n  const _className = cx(\"chakra-skeleton__group\", className);\n\n  return /* @__PURE__ */React.createElement(chakra.div, {\n    className: _className,\n    ...rest\n  }, numbers.map((number, index) => {\n    if (isLoaded && index > 0) {\n      return null;\n    }\n\n    const sizeProps = isLoaded ? null : {\n      mb: number === numbers.length ? \"0\" : spacing,\n      width: getWidth(number),\n      height: skeletonHeight\n    };\n    return /* @__PURE__ */React.createElement(Skeleton, {\n      key: numbers.length.toString() + number,\n      startColor: startColor2,\n      endColor: endColor2,\n      isLoaded,\n      fadeDuration,\n      speed,\n      ...sizeProps\n    }, index === 0 ? children : void 0);\n  }));\n};\n\nSkeletonText.displayName = \"SkeletonText\";\n\nvar SkeletonCircle = _ref => {\n  let {\n    size = \"2rem\",\n    ...rest\n  } = _ref;\n  return /* @__PURE__ */React.createElement(Skeleton, {\n    borderRadius: \"full\",\n    boxSize: size,\n    ...rest\n  });\n};\n\nSkeletonCircle.displayName = \"SkeletonCircle\";\nexport { Skeleton, SkeletonCircle, SkeletonText };","map":{"version":3,"sources":["/Users/Snirgu1/Desktop/draw-and-guess/client/node_modules/@chakra-ui/skeleton/dist/index.esm.js"],"names":["React","useBreakpointValue","chakra","forwardRef","keyframes","omitThemingProps","useStyleConfig","usePrevious","cx","classNames","filter","Boolean","join","useEffect","useRef","StyledSkeleton","baseStyle","boxShadow","backgroundClip","cursor","color","pointerEvents","userSelect","visibility","useIsFirstRender","isFirstRender","current","fade","from","opacity","to","startColor","endColor","bgFade","borderColor","background","Skeleton","props","ref","styles","startColor2","endColor2","isLoaded","fadeDuration","speed","className","rest","wasPreviouslyLoaded","_className","animation","createElement","div","__css","defaultProps","displayName","range","count","Array","fill","map","_","index","defaultNoOfLines","SkeletonText","noOfLines","spacing","skeletonHeight","children","noOfLinesValue","numbers","getWidth","length","number","sizeProps","mb","width","height","key","toString","SkeletonCircle","size","borderRadius","boxSize"],"mappings":"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","sourcesContent":["// ../../../react-shim.js\nimport React from \"react\";\n\n// src/skeleton.tsx\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\nimport {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { usePrevious } from \"@chakra-ui/react-use-previous\";\n\n// ../../utilities/shared-utils/dist/index.esm.js\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \");\n\n// src/skeleton.tsx\nimport { useEffect, useRef } from \"react\";\nvar StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\"\n    }\n  }\n});\nvar useIsFirstRender = () => {\n  const isFirstRender = useRef(true);\n  useEffect(() => {\n    isFirstRender.current = false;\n  }, []);\n  return isFirstRender.current;\n};\nvar fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 }\n});\nvar startColor = \"var(--skeleton-start-color)\";\nvar endColor = \"var(--skeleton-end-color)\";\nvar bgFade = keyframes({\n  from: { borderColor: startColor, background: startColor },\n  to: { borderColor: endColor, background: endColor }\n});\nvar Skeleton = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Skeleton\", props);\n  const isFirstRender = useIsFirstRender();\n  const {\n    startColor: startColor2,\n    endColor: endColor2,\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    ...rest\n  } = omitThemingProps(props);\n  const wasPreviouslyLoaded = usePrevious(isLoaded);\n  const _className = cx(\"chakra-skeleton\", className);\n  if (isLoaded) {\n    const animation = isFirstRender || wasPreviouslyLoaded ? \"none\" : `${fade} ${fadeDuration}s`;\n    return /* @__PURE__ */ React.createElement(chakra.div, {\n      ref,\n      className: _className,\n      __css: { animation },\n      ...rest\n    });\n  }\n  return /* @__PURE__ */ React.createElement(StyledSkeleton, {\n    ref,\n    className: _className,\n    ...rest,\n    __css: {\n      ...styles,\n      animation: `${speed}s linear infinite alternate ${bgFade}`\n    }\n  });\n});\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8\n};\nSkeleton.displayName = \"Skeleton\";\nfunction range(count) {\n  return Array(count).fill(1).map((_, index) => index + 1);\n}\nvar defaultNoOfLines = 3;\nvar SkeletonText = (props) => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor: startColor2,\n    endColor: endColor2,\n    isLoaded,\n    fadeDuration,\n    speed,\n    children,\n    ...rest\n  } = props;\n  const noOfLinesValue = useBreakpointValue(typeof noOfLines === \"number\" ? [noOfLines] : noOfLines) || defaultNoOfLines;\n  const numbers = range(noOfLinesValue);\n  const getWidth = (index) => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\";\n    }\n    return \"100%\";\n  };\n  const _className = cx(\"chakra-skeleton__group\", className);\n  return /* @__PURE__ */ React.createElement(chakra.div, {\n    className: _className,\n    ...rest\n  }, numbers.map((number, index) => {\n    if (isLoaded && index > 0) {\n      return null;\n    }\n    const sizeProps = isLoaded ? null : {\n      mb: number === numbers.length ? \"0\" : spacing,\n      width: getWidth(number),\n      height: skeletonHeight\n    };\n    return /* @__PURE__ */ React.createElement(Skeleton, {\n      key: numbers.length.toString() + number,\n      startColor: startColor2,\n      endColor: endColor2,\n      isLoaded,\n      fadeDuration,\n      speed,\n      ...sizeProps\n    }, index === 0 ? children : void 0);\n  }));\n};\nSkeletonText.displayName = \"SkeletonText\";\nvar SkeletonCircle = ({\n  size = \"2rem\",\n  ...rest\n}) => /* @__PURE__ */ React.createElement(Skeleton, {\n  borderRadius: \"full\",\n  boxSize: size,\n  ...rest\n});\nSkeletonCircle.displayName = \"SkeletonCircle\";\nexport {\n  Skeleton,\n  SkeletonCircle,\n  SkeletonText\n};\n"]},"metadata":{},"sourceType":"module"}