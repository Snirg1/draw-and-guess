{"ast":null,"code":"// ../shared-utils/dist/index.esm.js\nfunction isObject(value) {\n  const type = typeof value;\n  return value != null && (type === \"object\" || type === \"function\") && !Array.isArray(value);\n} // src/responsive.ts\n\n\nvar breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\", \"2xl\"]);\n\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map(item => item === null ? null : mapper(item));\n  }\n\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n\n  if (prop != null) {\n    return mapper(prop);\n  }\n\n  return null;\n}\n\nfunction objectToArrayNotation(obj) {\n  let bps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : breakpoints;\n  const result = bps.map(br => obj[br] ?? null);\n  const lastItem = result[result.length - 1];\n\n  while (lastItem === null) result.pop();\n\n  return result;\n}\n\nfunction arrayToObjectNotation(values) {\n  let bps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : breakpoints;\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null) return;\n    result[key] = value;\n  });\n  return result;\n}\n\nfunction isResponsiveObjectLike(obj) {\n  let bps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : breakpoints;\n  const keys2 = Object.keys(obj);\n  return keys2.length > 0 && keys2.every(key => bps.includes(key));\n}\n\nvar isCustomBreakpoint = v => Number.isNaN(Number(v)); // src/breakpoint.ts\n\n\nfunction getLastItem(array) {\n  const length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : void 0;\n}\n\nfunction analyzeCSSValue(value) {\n  const num = parseFloat(value.toString());\n  const unit = value.toString().replace(String(num), \"\");\n  return {\n    unitless: !unit,\n    value: num,\n    unit\n  };\n}\n\nfunction px(value) {\n  if (value == null) return value;\n  const {\n    unitless\n  } = analyzeCSSValue(value);\n  return unitless || typeof value === \"number\" ? `${value}px` : value;\n}\n\nvar sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;\n\nvar sortBps = breakpoints2 => Object.fromEntries(Object.entries(breakpoints2).sort(sortByBreakpointValue));\n\nfunction normalize(breakpoints2) {\n  const sorted = sortBps(breakpoints2);\n  return Object.assign(Object.values(sorted), sorted);\n}\n\nfunction keys(breakpoints2) {\n  const value = Object.keys(sortBps(breakpoints2));\n  return new Set(value);\n}\n\nfunction subtract(value) {\n  if (!value) return value;\n  value = px(value) ?? value;\n  const factor = value.endsWith(\"px\") ? -1 : -0.0625;\n  return typeof value === \"number\" ? `${value + factor}` : value.replace(/(\\d+\\.?\\d*)/u, m => `${parseFloat(m) + factor}`);\n}\n\nfunction toMediaQueryString(min, max) {\n  const query = [\"@media screen\"];\n  if (min) query.push(\"and\", `(min-width: ${px(min)})`);\n  if (max) query.push(\"and\", `(max-width: ${px(max)})`);\n  return query.join(\" \");\n}\n\nfunction analyzeBreakpoints(breakpoints2) {\n  if (!breakpoints2) return null;\n  breakpoints2.base = breakpoints2.base ?? \"0px\";\n  const normalized = normalize(breakpoints2);\n  const queries = Object.entries(breakpoints2).sort(sortByBreakpointValue).map((_ref, index, entry) => {\n    let [breakpoint, minW] = _ref;\n    let [, maxW] = entry[index + 1] ?? [];\n    maxW = parseFloat(maxW) > 0 ? subtract(maxW) : void 0;\n    return {\n      _minW: subtract(minW),\n      breakpoint,\n      minW,\n      maxW,\n      maxWQuery: toMediaQueryString(null, maxW),\n      minWQuery: toMediaQueryString(minW),\n      minMaxQuery: toMediaQueryString(minW, maxW)\n    };\n  });\n\n  const _keys = keys(breakpoints2);\n\n  const _keysArr = Array.from(_keys.values());\n\n  return {\n    keys: _keys,\n    normalized,\n\n    isResponsive(test) {\n      const keys2 = Object.keys(test);\n      return keys2.length > 0 && keys2.every(key => _keys.has(key));\n    },\n\n    asObject: sortBps(breakpoints2),\n    asArray: normalize(breakpoints2),\n    details: queries,\n    media: [null, ...normalized.map(minW => toMediaQueryString(minW)).slice(1)],\n\n    toArrayValue(test) {\n      if (!isObject(test)) {\n        throw new Error(\"toArrayValue: value must be an object\");\n      }\n\n      const result = _keysArr.map(bp => test[bp] ?? null);\n\n      while (getLastItem(result) === null) {\n        result.pop();\n      }\n\n      return result;\n    },\n\n    toObjectValue(test) {\n      if (!Array.isArray(test)) {\n        throw new Error(\"toObjectValue: value must be an array\");\n      }\n\n      return test.reduce((acc, value, index) => {\n        const key = _keysArr[index];\n        if (key != null && value != null) acc[key] = value;\n        return acc;\n      }, {});\n    }\n\n  };\n}\n\nexport { analyzeBreakpoints, arrayToObjectNotation, breakpoints, isCustomBreakpoint, isResponsiveObjectLike, mapResponsive, objectToArrayNotation, px, toMediaQueryString };","map":{"version":3,"sources":["/Users/Snirgu1/Desktop/draw-and-guess/client/node_modules/@chakra-ui/breakpoint-utils/dist/index.esm.js"],"names":["isObject","value","type","Array","isArray","breakpoints","Object","freeze","mapResponsive","prop","mapper","map","item","keys","reduce","result","key","objectToArrayNotation","obj","bps","br","lastItem","length","pop","arrayToObjectNotation","values","forEach","index","isResponsiveObjectLike","keys2","every","includes","isCustomBreakpoint","v","Number","isNaN","getLastItem","array","analyzeCSSValue","num","parseFloat","toString","unit","replace","String","unitless","px","sortByBreakpointValue","a","b","parseInt","sortBps","breakpoints2","fromEntries","entries","sort","normalize","sorted","assign","Set","subtract","factor","endsWith","m","toMediaQueryString","min","max","query","push","join","analyzeBreakpoints","base","normalized","queries","entry","breakpoint","minW","maxW","_minW","maxWQuery","minWQuery","minMaxQuery","_keys","_keysArr","from","isResponsive","test","has","asObject","asArray","details","media","slice","toArrayValue","Error","bp","toObjectValue","acc"],"mappings":"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","sourcesContent":["// ../shared-utils/dist/index.esm.js\nfunction isObject(value) {\n  const type = typeof value;\n  return value != null && (type === \"object\" || type === \"function\") && !Array.isArray(value);\n}\n\n// src/responsive.ts\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null);\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys2 = Object.keys(obj);\n  return keys2.length > 0 && keys2.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\n// src/breakpoint.ts\nfunction getLastItem(array) {\n  const length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : void 0;\n}\nfunction analyzeCSSValue(value) {\n  const num = parseFloat(value.toString());\n  const unit = value.toString().replace(String(num), \"\");\n  return { unitless: !unit, value: num, unit };\n}\nfunction px(value) {\n  if (value == null)\n    return value;\n  const { unitless } = analyzeCSSValue(value);\n  return unitless || typeof value === \"number\" ? `${value}px` : value;\n}\nvar sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;\nvar sortBps = (breakpoints2) => Object.fromEntries(Object.entries(breakpoints2).sort(sortByBreakpointValue));\nfunction normalize(breakpoints2) {\n  const sorted = sortBps(breakpoints2);\n  return Object.assign(Object.values(sorted), sorted);\n}\nfunction keys(breakpoints2) {\n  const value = Object.keys(sortBps(breakpoints2));\n  return new Set(value);\n}\nfunction subtract(value) {\n  if (!value)\n    return value;\n  value = px(value) ?? value;\n  const factor = value.endsWith(\"px\") ? -1 : -0.0625;\n  return typeof value === \"number\" ? `${value + factor}` : value.replace(/(\\d+\\.?\\d*)/u, (m) => `${parseFloat(m) + factor}`);\n}\nfunction toMediaQueryString(min, max) {\n  const query = [\"@media screen\"];\n  if (min)\n    query.push(\"and\", `(min-width: ${px(min)})`);\n  if (max)\n    query.push(\"and\", `(max-width: ${px(max)})`);\n  return query.join(\" \");\n}\nfunction analyzeBreakpoints(breakpoints2) {\n  if (!breakpoints2)\n    return null;\n  breakpoints2.base = breakpoints2.base ?? \"0px\";\n  const normalized = normalize(breakpoints2);\n  const queries = Object.entries(breakpoints2).sort(sortByBreakpointValue).map(([breakpoint, minW], index, entry) => {\n    let [, maxW] = entry[index + 1] ?? [];\n    maxW = parseFloat(maxW) > 0 ? subtract(maxW) : void 0;\n    return {\n      _minW: subtract(minW),\n      breakpoint,\n      minW,\n      maxW,\n      maxWQuery: toMediaQueryString(null, maxW),\n      minWQuery: toMediaQueryString(minW),\n      minMaxQuery: toMediaQueryString(minW, maxW)\n    };\n  });\n  const _keys = keys(breakpoints2);\n  const _keysArr = Array.from(_keys.values());\n  return {\n    keys: _keys,\n    normalized,\n    isResponsive(test) {\n      const keys2 = Object.keys(test);\n      return keys2.length > 0 && keys2.every((key) => _keys.has(key));\n    },\n    asObject: sortBps(breakpoints2),\n    asArray: normalize(breakpoints2),\n    details: queries,\n    media: [\n      null,\n      ...normalized.map((minW) => toMediaQueryString(minW)).slice(1)\n    ],\n    toArrayValue(test) {\n      if (!isObject(test)) {\n        throw new Error(\"toArrayValue: value must be an object\");\n      }\n      const result = _keysArr.map((bp) => test[bp] ?? null);\n      while (getLastItem(result) === null) {\n        result.pop();\n      }\n      return result;\n    },\n    toObjectValue(test) {\n      if (!Array.isArray(test)) {\n        throw new Error(\"toObjectValue: value must be an array\");\n      }\n      return test.reduce((acc, value, index) => {\n        const key = _keysArr[index];\n        if (key != null && value != null)\n          acc[key] = value;\n        return acc;\n      }, {});\n    }\n  };\n}\nexport {\n  analyzeBreakpoints,\n  arrayToObjectNotation,\n  breakpoints,\n  isCustomBreakpoint,\n  isResponsiveObjectLike,\n  mapResponsive,\n  objectToArrayNotation,\n  px,\n  toMediaQueryString\n};\n"]},"metadata":{},"sourceType":"module"}