{"ast":null,"code":"// ../../react-shim.js\nimport React from \"react\"; // src/image.tsx\n\nimport { chakra, forwardRef as forwardRef2 } from \"@chakra-ui/system\"; // ../../utilities/object-utils/dist/index.esm.js\n\nfunction omit(object) {\n  let keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const clone = Object.assign({}, object);\n\n  for (const key of keysToOmit) {\n    if (key in clone) delete clone[key];\n  }\n\n  return clone;\n} // src/use-image.ts\n\n\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nfunction useImage(props) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback\n  } = props;\n  const [status, setStatus] = useState(\"pending\");\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  const imageRef = useRef();\n  const load = useCallback(() => {\n    if (!src) return;\n    flush();\n    const img = new Image();\n    img.src = src;\n    if (crossOrigin) img.crossOrigin = crossOrigin;\n    if (srcSet) img.srcset = srcSet;\n    if (sizes) img.sizes = sizes;\n    if (loading) img.loading = loading;\n\n    img.onload = event => {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n\n    img.onerror = error => {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n\n  useSafeLayoutEffect(() => {\n    if (ignoreFallback) return void 0;\n\n    if (status === \"loading\") {\n      load();\n    }\n\n    return () => {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  return ignoreFallback ? \"loaded\" : status;\n}\n\nvar shouldShowFallbackImage = (status, fallbackStrategy) => status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\" || status === \"failed\" && fallbackStrategy === \"onError\"; // src/native-image.tsx\n\n\nimport { forwardRef } from \"@chakra-ui/system\";\nvar NativeImage = forwardRef(function NativeImage2(props, ref) {\n  const {\n    htmlWidth,\n    htmlHeight,\n    alt,\n    ...rest\n  } = props;\n  return /* @__PURE__ */React.createElement(\"img\", {\n    width: htmlWidth,\n    height: htmlHeight,\n    ref,\n    alt,\n    ...rest\n  });\n});\nNativeImage.displayName = \"NativeImage\"; // src/image.tsx\n\nvar Image2 = forwardRef2(function Image3(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props;\n  const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;\n  const shouldIgnoreFallbackImage = loading != null || ignoreFallback || !providedFallback;\n  const status = useImage({ ...props,\n    ignoreFallback: shouldIgnoreFallbackImage\n  });\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"]))\n  };\n\n  if (showFallbackImage) {\n    if (fallback) return fallback;\n    return /* @__PURE__ */React.createElement(chakra.img, {\n      as: NativeImage,\n      className: \"chakra-image__placeholder\",\n      src: fallbackSrc,\n      ...shared\n    });\n  }\n\n  return /* @__PURE__ */React.createElement(chakra.img, {\n    as: NativeImage,\n    src,\n    srcSet,\n    crossOrigin,\n    loading,\n    referrerPolicy,\n    className: \"chakra-image\",\n    ...shared\n  });\n});\nImage2.displayName = \"Image\"; // src/img.tsx\n\nimport { chakra as chakra2, forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nvar Img = forwardRef3((props, ref) => /* @__PURE__ */React.createElement(chakra2.img, {\n  ref,\n  as: NativeImage,\n  className: \"chakra-image\",\n  ...props\n}));\nexport { Image2 as Image, Img, shouldShowFallbackImage, useImage };","map":{"version":3,"sources":["/Users/Snirgu1/Desktop/draw-and-guess/client/node_modules/@chakra-ui/image/dist/index.esm.js"],"names":["React","chakra","forwardRef","forwardRef2","omit","object","keysToOmit","clone","Object","assign","key","useSafeLayoutEffect","useCallback","useEffect","useRef","useState","useImage","props","loading","src","srcSet","onLoad","onError","crossOrigin","sizes","ignoreFallback","status","setStatus","imageRef","load","flush","img","Image","srcset","onload","event","onerror","error","current","shouldShowFallbackImage","fallbackStrategy","NativeImage","NativeImage2","ref","htmlWidth","htmlHeight","alt","rest","createElement","width","height","displayName","Image2","Image3","fallbackSrc","fallback","align","fit","referrerPolicy","providedFallback","shouldIgnoreFallbackImage","showFallbackImage","shared","objectFit","objectPosition","as","className","chakra2","forwardRef3","Img"],"mappings":"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","sourcesContent":["// ../../react-shim.js\nimport React from \"react\";\n\n// src/image.tsx\nimport {\n  chakra,\n  forwardRef as forwardRef2\n} from \"@chakra-ui/system\";\n\n// ../../utilities/object-utils/dist/index.esm.js\nfunction omit(object, keysToOmit = []) {\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone)\n      delete clone[key];\n  }\n  return clone;\n}\n\n// src/use-image.ts\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nfunction useImage(props) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback\n  } = props;\n  const [status, setStatus] = useState(\"pending\");\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  const imageRef = useRef();\n  const load = useCallback(() => {\n    if (!src)\n      return;\n    flush();\n    const img = new Image();\n    img.src = src;\n    if (crossOrigin)\n      img.crossOrigin = crossOrigin;\n    if (srcSet)\n      img.srcset = srcSet;\n    if (sizes)\n      img.sizes = sizes;\n    if (loading)\n      img.loading = loading;\n    img.onload = (event) => {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n    img.onerror = (error) => {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n  useSafeLayoutEffect(() => {\n    if (ignoreFallback)\n      return void 0;\n    if (status === \"loading\") {\n      load();\n    }\n    return () => {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  return ignoreFallback ? \"loaded\" : status;\n}\nvar shouldShowFallbackImage = (status, fallbackStrategy) => status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\" || status === \"failed\" && fallbackStrategy === \"onError\";\n\n// src/native-image.tsx\nimport { forwardRef } from \"@chakra-ui/system\";\nvar NativeImage = forwardRef(function NativeImage2(props, ref) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props;\n  return /* @__PURE__ */ React.createElement(\"img\", {\n    width: htmlWidth,\n    height: htmlHeight,\n    ref,\n    alt,\n    ...rest\n  });\n});\nNativeImage.displayName = \"NativeImage\";\n\n// src/image.tsx\nvar Image2 = forwardRef2(function Image3(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props;\n  const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;\n  const shouldIgnoreFallbackImage = loading != null || ignoreFallback || !providedFallback;\n  const status = useImage({\n    ...props,\n    ignoreFallback: shouldIgnoreFallbackImage\n  });\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])\n  };\n  if (showFallbackImage) {\n    if (fallback)\n      return fallback;\n    return /* @__PURE__ */ React.createElement(chakra.img, {\n      as: NativeImage,\n      className: \"chakra-image__placeholder\",\n      src: fallbackSrc,\n      ...shared\n    });\n  }\n  return /* @__PURE__ */ React.createElement(chakra.img, {\n    as: NativeImage,\n    src,\n    srcSet,\n    crossOrigin,\n    loading,\n    referrerPolicy,\n    className: \"chakra-image\",\n    ...shared\n  });\n});\nImage2.displayName = \"Image\";\n\n// src/img.tsx\nimport { chakra as chakra2, forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nvar Img = forwardRef3((props, ref) => /* @__PURE__ */ React.createElement(chakra2.img, {\n  ref,\n  as: NativeImage,\n  className: \"chakra-image\",\n  ...props\n}));\nexport {\n  Image2 as Image,\n  Img,\n  shouldShowFallbackImage,\n  useImage\n};\n"]},"metadata":{},"sourceType":"module"}